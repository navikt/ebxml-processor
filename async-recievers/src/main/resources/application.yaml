management:
  endpoints.web:
    base-path: '/internal'
    exposure.include: 'health,prometheus,loggers,info,metrics'
  endpoint:
    prometheus:
      enabled: true
    loggers:
      enabled: true
    health:
      show-details: always

spring:
  kafka:
    bootstrap-servers: ${KAFKA_BROKERS}
    properties:
      security:
        protocol: SSL
      ssl:
        key.password: ${KAFKA_CREDSTORE_PASSWORD}
        truststore:
          type: JKS
          location: ${KAFKA_TRUSTSTORE_PATH}
          password: ${KAFKA_CREDSTORE_PASSWORD}
        keystore:
          type: PKCS12
          location: ${KAFKA_KEYSTORE_PATH}
          password: ${KAFKA_CREDSTORE_PASSWORD}
      schema.registry.url: ${KAFKA_SCHEMA_REGISTRY}
      basic:
        auth:
          credentials:
            source: USER_INFO
          user:
            info: ${KAFKA_SCHEMA_REGISTRY_USER}:${KAFKA_SCHEMA_REGISTRY_PASSWORD}

      consumer:
        max-poll-records: 1
        properties:
          enable.auto.commit: false
          retry.backoff.ms: 2000
          reconnect.backoff.ms: 2000
        auto-offset-reset: earliest
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      listener.ack-mode: record

      producer:
        acks: all
        properties:
          max.block.ms: 5000
          enable.idempotence: true
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
