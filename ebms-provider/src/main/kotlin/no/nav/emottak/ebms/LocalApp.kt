/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package no.nav.emottak.ebms

import dev.reformator.stacktracedecoroutinator.runtime.DecoroutinatorRuntime
import io.ktor.server.application.Application
import io.ktor.server.engine.embeddedServer
import io.ktor.server.netty.Netty
import no.nav.emottak.util.getEnvVar
import org.apache.commons.lang3.SystemUtils
import java.io.IOException
import java.util.*
import java.util.regex.Pattern

val kubectlPath: String = getLocalKubectlPath()
var envVariables: MutableMap<String, String> = mutableMapOf()
var mountedValues = mapOf<String, String>(
//    "UR_EKSTERN_SERVICE_USERNAME" to "/var/run/secrets/nais.io/srv-ytelser-rest-proxy/username",
//    "UR_EKSTERN_SERVICE_PASSWORD" to "/var/run/secrets/nais.io/srv-ytelser-rest-proxy/password"
)

fun main() {
    retrieveEnvVariables()

    System.setProperty("io.ktor.http.content.multipart.skipTempFile", "true")

    setProperties()

    if (getEnvVar("NAIS_CLUSTER_NAME", "local") != "prod-fss") {
        DecoroutinatorRuntime.load()
    }
    embeddedServer(Netty, port = 8080, module = Application::ebmsProviderModule, configure = {
        this.maxChunkSize = 100000
    }).start(wait = true)
}

fun retrieveEnvVariables() {
    val podName: String = retrievePodName("ebms-provider-[^\\s]*")
    val envVariablesString: String =
        runCommand(kubectlPath + " exec -it " + podName + " -- env")

    val lines = envVariablesString.split("\\n".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()
    for (line in lines) {
        val keyValue = line.split("=".toRegex(), limit = 2).toTypedArray()
        if (keyValue.size == 2) {
            envVariables[keyValue[0].trim { it <= ' ' }] = keyValue[1].trim { it <= ' ' }
        }
    }

    retrieveMountedValues()
}

@Throws(IOException::class)
fun retrieveMountedValues() {
    val podsName: String = retrievePodName("ebms-provider-[^\\s]*")
    for ((key, value) in mountedValues.entries) {
        val verdi: String = runCommand(kubectlPath + " exec " + podsName + " -- cat " + value)
        envVariables.put(key, verdi)
    }
}

fun retrievePodName(regex: String): String {
    val pods: String = runCommand(kubectlPath + " get pods -o custom-columns=:metadata.name")
    val podMatcher = Pattern
        .compile(regex)
        .matcher(pods)
    podMatcher.find()
    return podMatcher.group()
}

@Throws(IOException::class)
fun runCommand(command: String): String {
    val cmdArray = command.split(" ").toTypedArray()
    val process = Runtime.getRuntime().exec(cmdArray, null)

    return process.inputStream.bufferedReader().use { it.readText() }
}

fun setProperties() {
    // Check which properties are used by a particular service

    System.setProperty(
        "NAIS_CLUSTER_NAME",
        envVariables.getOrDefault("NAIS_CLUSTER_NAME", "local")
    )
}

fun getLocalKubectlPath(): String {
    return if (SystemUtils.IS_OS_WINDOWS) {
        "kubectl"
    } else if (SystemUtils.IS_OS_LINUX) {
        "/usr/local/bin/kubectl"
    } else {
        throw UnsupportedOperationException(
            "Unsupported OS: " + System.getProperty("os.name").lowercase(Locale.getDefault())
        )
    }
}
