/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package no.nav.emottak.ebms

import arrow.continuations.SuspendApp
import arrow.continuations.ktor.server
import arrow.core.raise.result
import arrow.fx.coroutines.resourceScope
import io.ktor.http.HttpStatusCode
import io.ktor.server.application.Application
import io.ktor.server.netty.Netty
import io.ktor.server.response.respond
import io.ktor.server.routing.get
import io.ktor.server.routing.routing
import io.ktor.utils.io.CancellationException
import io.micrometer.prometheusmetrics.PrometheusConfig
import io.micrometer.prometheusmetrics.PrometheusMeterRegistry
import kotlinx.coroutines.awaitCancellation
import no.nav.emottak.ebms.configuration.config
import no.nav.emottak.ebms.processing.ProcessingService
import no.nav.emottak.ebms.sendin.SendInService
import no.nav.emottak.ebms.util.EventRegistrationService
import no.nav.emottak.ebms.util.EventRegistrationServiceImpl
import no.nav.emottak.ebms.validation.CPAValidationService
import no.nav.emottak.utils.edi2.EdiAdapterClient
import no.nav.emottak.utils.edi2.models.AppRecError
import no.nav.emottak.utils.edi2.models.AppRecStatus
import no.nav.emottak.utils.edi2.models.EbXmlInfo
import no.nav.emottak.utils.edi2.models.GetMessagesRequest
import no.nav.emottak.utils.edi2.models.OrderBy
import no.nav.emottak.utils.edi2.models.PostAppRecRequest
import no.nav.emottak.utils.edi2.models.PostMessageRequest
import no.nav.emottak.utils.kafka.client.EventPublisherClient
import no.nav.emottak.utils.kafka.service.EventLoggingService
import org.slf4j.LoggerFactory
import kotlin.uuid.Uuid

val log = LoggerFactory.getLogger("no.nav.emottak.ebms.App")

fun logger() = log
fun main() = SuspendApp {
    System.setProperty("io.ktor.http.content.multipart.skipTempFile", "true")

    val processingClient = PayloadProcessingClient(scopedAuthHttpClient(EBMS_PAYLOAD_SCOPE))
    val processingService = ProcessingService(processingClient)

    val cpaClient = CpaRepoClient(defaultHttpClient())
    val cpaValidationService = CPAValidationService(cpaClient)

    val sendInClient = SendInClient(scopedAuthHttpClient(EBMS_SEND_IN_SCOPE))
    val sendInService = SendInService(sendInClient)

    val kafkaPublisherClient = EventPublisherClient(config().kafka)
    val eventLoggingService = EventLoggingService(config().eventLogging, kafkaPublisherClient)
    val eventRegistrationService = EventRegistrationServiceImpl(eventLoggingService)

    result {
        resourceScope {
            server(
                Netty,
                port = 8080,
                module = {
                    ebmsProviderModule(
                        cpaValidationService,
                        processingService,
                        sendInService,
                        eventRegistrationService
                    )
                }
            ).also { it.engineConfig.maxChunkSize = 100000 }

            awaitCancellation()
        }
    }
        .onFailure { error ->
            when (error) {
                is CancellationException -> {} // expected behaviour - normal shutdown
                else -> log.error("Unexpected shutdown initiated", error)
            }
        }
}

fun Application.ebmsProviderModule(
    cpaValidationService: CPAValidationService,
    processing: ProcessingService,
    sendInService: SendInService,
    eventRegistrationService: EventRegistrationService
) {
    val appMicrometerRegistry = PrometheusMeterRegistry(PrometheusConfig.DEFAULT)

    installMicrometerRegistry(appMicrometerRegistry)
    installRequestTimerPlugin()
    installContentNegotiation()

    routing {
        registerRootEndpoint()
        registerHealthEndpoints()
        registerPrometheusEndpoint(appMicrometerRegistry)
        registerNavCheckStatus()

        postEbmsSync(cpaValidationService, processing, sendInService, eventRegistrationService)

        get("/edi2-test") {
            val scope = "api://dev-gcp.team-emottak.edi-adapter/.default"
            val ediAdapterUrl = "https://edi-transport.intern.dev.nav.no"

            val ediAdapterClient = EdiAdapterClient(ediAdapterUrl)

            // 1
            try {
                val response = ediAdapterClient.getApprecInfo(Uuid.random())
                log.info("EDI2 test: Response from edi-adapter: $response")
                log.info("EDI2 test: test succeeded getApprecInfo()")
            } catch (e: Exception) {
                log.error("EDI2 test: Exception occurred while calling edi-adapter", e)
                log.info("EDI2 test: test failed getApprecInfo()")
            }

            // 2
            try {
                val getMessagesRequest = GetMessagesRequest(
                    receiverHerIds = listOf(123456),
                    senderHerId = 654321,
                    businessDocumentId = Uuid.random().toString(),
                    includeMetadata = true,
                    messagesToFetch = 5,
                    orderBy = OrderBy.DESC
                )

                val response = ediAdapterClient.getMessages(getMessagesRequest)
                log.info("EDI2 test: Response from edi-adapter: $response")
                log.info("EDI2 test: test succeeded getMessages()")
            } catch (e: Exception) {
                log.error("EDI2 test: Exception occurred while calling edi-adapter", e)
                log.info("EDI2 test: test failed getMessages()")
            }

            // 3
            try {
                val postMessagesRequest = PostMessageRequest(
                    businessDocument = "<test>Dette er en test</test>",
                    contentType = "application/xml",
                    contentTransferEncoding = "base64",
                    ebXmlOverrides = EbXmlInfo(
                        cpaId = "test-cpa-id",
                        conversationId = "test-conversation-id",
                        service = "test-service",
                        serviceType = "test-service-type",
                        action = "test-action",
                        senderRole = "test-sender-role",
                        useSenderLevel1HerId = true,
                        receiverRole = "test-receiver-role",
                        applicationName = "test-application-name",
                        applicationVersion = "1.0",
                        middlewareName = "test-middleware-name",
                        middlewareVersion = "1.0",
                        compressPayload = false
                    ),
                    receiverHerIdsSubset = listOf(123456)
                )

                val response = ediAdapterClient.postMessages(postMessagesRequest)
                log.info("EDI2 test: Response from edi-adapter: $response")
                log.info("EDI2 test: test succeeded postMessages()")
            } catch (e: Exception) {
                log.error("EDI2 test: Exception occurred while calling edi-adapter", e)
                log.info("EDI2 test: test failed postMessages()")
            }

            // 4
            try {
                val response = ediAdapterClient.getMessage(Uuid.random())
                log.info("EDI2 test: Response from edi-adapter: $response")
                log.info("EDI2 test: test succeeded getMessage()")
            } catch (e: Exception) {
                log.error("EDI2 test: Exception occurred while calling edi-adapter", e)
                log.info("EDI2 test: test failed getMessage()")
            }

            // 5
            try {
                val response = ediAdapterClient.getBusinessDocument(Uuid.random())
                log.info("EDI2 test: Response from edi-adapter: $response")
                log.info("EDI2 test: test succeeded getBusinessDocument()")
            } catch (e: Exception) {
                log.error("EDI2 test: Exception occurred while calling edi-adapter", e)
                log.info("EDI2 test: test failed getBusinessDocument()")
            }

            // 6
            try {
                val response = ediAdapterClient.getMessageStatus(Uuid.random())
                log.info("EDI2 test: Response from edi-adapter: $response")
                log.info("EDI2 test: test succeeded getMessageStatus()")
            } catch (e: Exception) {
                log.error("EDI2 test: Exception occurred while calling edi-adapter", e)
                log.info("EDI2 test: test failed getMessageStatus()")
            }

            // 7
            try {
                val postAppRecRequest = PostAppRecRequest(
                    appRecStatus = AppRecStatus.REJECTED,
                    appRecErrorList = listOf(
                        AppRecError(
                            errorCode = "123",
                            details = "Some details",
                            description = "Some description",
                            oid = "abc123"
                        )
                    ),
                    ebXmlOverrides = EbXmlInfo(
                        cpaId = "test-cpa-id",
                        conversationId = "test-conversation-id",
                        service = "test-service",
                        serviceType = "test-service-type",
                        action = "test-action",
                        senderRole = "test-sender-role",
                        useSenderLevel1HerId = true,
                        receiverRole = "test-receiver-role",
                        applicationName = "test-application-name",
                        applicationVersion = "1.0",
                        middlewareName = "test-middleware-name",
                        middlewareVersion = "1.0",
                        compressPayload = false
                    )
                )

                val response = ediAdapterClient.postApprec(Uuid.random(), 123456, postAppRecRequest)
                log.info("EDI2 test: Response from edi-adapter: $response")
                log.info("EDI2 test: test succeeded postApprec()")
            } catch (e: Exception) {
                log.error("EDI2 test: Exception occurred while calling edi-adapter", e)
                log.info("EDI2 test: test failed postApprec()")
            }

            // 8
            try {
                val response = ediAdapterClient.markMessageAsRead(Uuid.random(), 123456)
                log.info("EDI2 test: Response from edi-adapter: $response")
                log.info("EDI2 test: test succeeded markMessageAsRead()")
            } catch (e: Exception) {
                log.error("EDI2 test: Exception occurred while calling edi-adapter", e)
                log.info("EDI2 test: test failed markMessageAsRead()")
            }

            call.respond(
                HttpStatusCode.InternalServerError,
                "EDI2 test: Pong from edi2-test"
            )
        }
    }
}
