package no.nav.emottak.ebms

import io.ktor.client.request.*
import io.ktor.client.request.forms.*
import io.ktor.http.*
import io.ktor.http.content.*
import no.nav.emottak.ebms.validation.MimeHeaders

const val MULTIPART_CONTENT_TYPE: String = """multipart/related;type="text/xml";boundary="----=_Part_495_-1172936255.1665395092859";start="<soapId-6ae68a32-8b0e-4de2-baad-f4d841aacce1>";"""
const val EBXML_PAYLOAD: String = """PFNPQVA6RW52ZWxvcGUgeG1sbnM6U09BUD0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOmViPSJodHRwOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL2NvbW1pdHRlZXMvZWJ4bWwtbXNnL3NjaGVtYS9tc2ctaGVhZGVyLTJfMC54c2QiIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3NvYXAvZW52ZWxvcGUvIGh0dHA6Ly93d3cub2FzaXMtb3Blbi5vcmcvY29tbWl0dGVlcy9lYnhtbC1tc2cvc2NoZW1hL2VudmVsb3BlLnhzZCBodHRwOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL2NvbW1pdHRlZXMvZWJ4bWwtbXNnL3NjaGVtYS9tc2ctaGVhZGVyLTJfMC54c2QiPjxTT0FQOkhlYWRlcj48ZWI6TWVzc2FnZUhlYWRlciBTT0FQOm11c3RVbmRlcnN0YW5kPSIxIiBlYjp2ZXJzaW9uPSIyLjAiPjxlYjpGcm9tPjxlYjpQYXJ0eUlkIGViOnR5cGU9IkhFUiI+ODgzNjQ8L2ViOlBhcnR5SWQ+PGViOlJvbGU+VXRsZXZlcmVyPC9lYjpSb2xlPjwvZWI6RnJvbT48ZWI6VG8+PGViOlBhcnR5SWQgZWI6dHlwZT0iSEVSIj43OTc2ODwvZWI6UGFydHlJZD48ZWI6Um9sZT5Gcmlrb3J0cmVnaXN0ZXI8L2ViOlJvbGU+PC9lYjpUbz48ZWI6Q1BBSWQ+bmF2OnFhc3M6MzE4Njg8L2ViOkNQQUlkPjxlYjpDb252ZXJzYXRpb25JZD5hYjFjOWI0Mi04ZDI5LTQ5YWQtYjg3MS1iNDc4OTFlMDNmODg8L2ViOkNvbnZlcnNhdGlvbklkPjxlYjpTZXJ2aWNlIGViOnR5cGU9InN0cmluZyI+SGFyQm9yZ2VyRWdlbmFuZGVsRnJpdGFrPC9lYjpTZXJ2aWNlPjxlYjpBY3Rpb24+RWdlbmFuZGVsRm9yZXNwb3JzZWw8L2ViOkFjdGlvbj48ZWI6TWVzc2FnZURhdGE+PGViOk1lc3NhZ2VJZD5hYjFjOWI0Mi04ZDI5LTQ5YWQtYjg3MS1iNDc4OTFlMDNmODg8L2ViOk1lc3NhZ2VJZD48ZWI6VGltZXN0YW1wPjIwMjItMTAtMTBUMDk6NDQ6NTIuNDMxWjwvZWI6VGltZXN0YW1wPjwvZWI6TWVzc2FnZURhdGE+PC9lYjpNZXNzYWdlSGVhZGVyPjxlYjpTeW5jUmVwbHkgU09BUDphY3Rvcj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9hY3Rvci9uZXh0IiBTT0FQOm11c3RVbmRlcnN0YW5kPSIxIiBlYjp2ZXJzaW9uPSIyLjAiPjwvZWI6U3luY1JlcGx5PjxTaWduYXR1cmUgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxTaWduZWRJbmZvPjxDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMS9SRUMteG1sLWMxNG4tMjAwMTAzMTUiPjwvQ2Fub25pY2FsaXphdGlvbk1ldGhvZD48U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIj48L1NpZ25hdHVyZU1ldGhvZD48UmVmZXJlbmNlIFVSST0iIj48VHJhbnNmb3Jtcz48VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiPjwvVHJhbnNmb3JtPjxUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAxL1JFQy14bWwtYzE0bi0yMDAxMDMxNSI+PC9UcmFuc2Zvcm0+PC9UcmFuc2Zvcm1zPjxEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSI+PC9EaWdlc3RNZXRob2Q+PERpZ2VzdFZhbHVlPlgyalNJL1VieG5LSGpjMXpVV053eHpBUEc0dz08L0RpZ2VzdFZhbHVlPjwvUmVmZXJlbmNlPjxSZWZlcmVuY2UgVVJJPSJjaWQ6YXR0YWNobWVudElkLTAyMmZhZjI2LTBlMTItNGRmZS1hNTliLWI1MDYxMzJmMTY0NSI+PERpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIj48L0RpZ2VzdE1ldGhvZD48RGlnZXN0VmFsdWU+djlQSGVqMlNnV2x3d1FRQVZFTlVEMG80UjRVPTwvRGlnZXN0VmFsdWU+PC9SZWZlcmVuY2U+PC9TaWduZWRJbmZvPjxTaWduYXR1cmVWYWx1ZT5Nb1QyeUxvY0pMb2R2WGE3dzEwTnJDMFpaM1ZlR3FvSk9QUXlsZG1tampGZ0JxdXBqU0xiQmFIYVgyYWFzNFFPL3FSRGx6Vk9ubDZ2bERkRWJ5LzBvMjdMWkppZEx2dEhXRWN6WEpVR1V3ZXNhY1V1M2hjbUZodWJVSTlhbXdvTVpmelRaaVlIYzZPTlowUVZXcE1rdlRVWUdsSXIvS0V5TmFFeGZ1WWVQKzYxWXdwMlB0UjFpbmVOaUgrWmpjOWpYZStWMHUyaVFtL3pzSzRUZ2VtdDRva3BTWkRCd2RUSzFUQ1h1UThRKzVKOTBzeDUwWU5Bb0VLbEgrMkdkeFRYRWxaZ3RHSmdQOCtYYVBKZzB5VWJmWkxhREJXZDhyMGljSTlUamM2aXdBUkczT2JoTS9iNGdqZ3pQU0NIS2hIbWJJWkVGWkZ4bUtaQUU3Mk1NejhHY1E9PTwvU2lnbmF0dXJlVmFsdWU+PEtleUluZm8+PFg1MDlEYXRhPjxYNTA5Q2VydGlmaWNhdGU+TUlJRlFUQ0NCQ21nQXdJQkFnSUxCTmdKQTZINDhBN1JLUGN3RFFZSktvWklodmNOQVFFTEJRQXdVVEVMTUFrR0ExVUVCaE1DVGs4eEhUQWJCZ05WQkFvTUZFSjFlWEJoYzNNZ1FWTXRPVGd6TVRZek16STNNU013SVFZRFZRUUREQnBDZFhsd1lYTnpJRU5zWVhOeklETWdWR1Z6ZERRZ1EwRWdNekFlRncweU1UQTVNVFl4TmpVM05EaGFGdzB5TkRBNU1UWXlNVFU1TURCYU1JR0hNUXN3Q1FZRFZRUUdFd0pPVHpFWE1CVUdBMVVFQ2d3T1FrOVBWRk1nVGs5U1IwVWdRVk14SnpBbEJnTlZCQXNNSGtKUFQxUlRJRUZRVDFSRlN5QlRTOE9ZV1VWT0xUazNPVFF3TmpreU5ERWlNQ0FHQTFVRUF3d1pRazlQVkZNZ1FWQlBWRVZMSUZOTHc1aFpSVTRnVkVWVFZERVNNQkFHQTFVRUJSTUpPVGd5TlRRM09ESXlNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXAvaWtLbUhJaGRpRWw5d04zZGwvSVI1Y0RWK3o1R0RKU1NhQnR5QUZUZGdTdGVYQ3pPU0tpVitPMkgvMTVYN1NiNGkzK2gyb3FuNlpQdnFza2FYbE1GUXFkZlBOZnI2QVFsYVdhdlBQZ0w1dWJPeXFjSjdjMlZ6bzZMRlQ2WHNyaFN5MW4rcnozTXVRSUNqdjdVMzRCNnArc3JKbDh0OW9mNUVwOWJsUGo4bXR5OWZaU2JpZis3b1hxa2FBQVV5TFQ4T2hyUmhaWlR4QVdDWDMvLzNXbEtqMk1udk4xR0JZK3NjUDk4RjRoM0dyTFBiMEN3RHJJWVJrZDJhYlNHVUhUZXRoV1lNamtRbVp6YkVDQk45K1Z1cnpaY0VyUVhKMm9XcHF2aW1PYkJWUW5hc1ZZRjkvWE5KZlBnNVBPUGJoU3BsQ0pxRzFCcWpyODdudmFmM1RSd0lEQVFBQm80SUI0VENDQWQwd0NRWURWUjBUQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlEvcnZWNEM1S2pjQ0ExWDFyNjl5U2dVZ0h3UVRBZEJnTlZIUTRFRmdRVXF1YWhsU0FSb1h5YnRaaUJsVG1Qc0xubUZaWXdEZ1lEVlIwUEFRSC9CQVFEQWdaQU1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUNCZ2dyQmdFRkJRY0RCREFXQmdOVkhTQUVEekFOTUFzR0NXQ0VRZ0VhQVFBREFqQ0J1d1lEVlIwZkJJR3pNSUd3TURlZ05hQXpoakZvZEhSd09pOHZZM0pzTG5SbGMzUTBMbUoxZVhCaGMzTXVibTh2WTNKc0wwSlFRMnhoYzNNelZEUkRRVE11WTNKc01IV2djNkJ4aG05c1pHRndPaTh2YkdSaGNDNTBaWE4wTkM1aWRYbHdZWE56TG01dkwyUmpQVUoxZVhCaGMzTXNaR005VGs4c1EwNDlRblY1Y0dGemN5VXlNRU5zWVhOekpUSXdNeVV5TUZSbGMzUTBKVEl3UTBFbE1qQXpQMk5sY25ScFptbGpZWFJsVW1WMmIyTmhkR2x2Ymt4cGMzUXdnWW9HQ0NzR0FRVUZCd0VCQkg0d2ZEQTdCZ2dyQmdFRkJRY3dBWVl2YUhSMGNEb3ZMMjlqYzNBdWRHVnpkRFF1WW5WNWNHRnpjeTV1Ynk5dlkzTndMMEpRUTJ4aGMzTXpWRFJEUVRNd1BRWUlLd1lCQlFVSE1BS0dNV2gwZEhBNkx5OWpjblF1ZEdWemREUXVZblY1Y0dGemN5NXVieTlqY25RdlFsQkRiR0Z6Y3pOVU5FTkJNeTVqWlhJd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFDek9xUGZBUlgvZVE3Ry92M1EzUlo1bkJuUi9uTjQ2WWx5VzBjU1hOMEZKa1pMeGJWZThBNUUvSTFRdjdFYUFvdEwyV0VJV1FJZlhCdkRqTDZ6UmVkUEpEYXRjUEI5dHR0bGpta1JMSENzSUdDZTRpUndURGFqNEVYZHVWOU1rdVBBUklWNWFLRGpmMC8wdTl4Yk54SFJQWTNTb2FJNmRzUEVhb1VjWGt0QnVMTGJrV3ZFQXo1c2xvRU8wRGp1eGY2V1pRZDdGeWcyd2l2SlltUWwvNzVkTGVEYUFUS092YWdTMWtZemtqeHRsd09LbFZ2Q21ZSTFicFlSRnl4Y2lDWGVYL09BRU9LakNqM0FkdlBzUVdMOERyeFVQYVdxS0RzcGxWRlJod3NldFQ1UW5YejdKazNNY0hBS21KNUFuYXdMMXE2RmdxRG5CcWdiOGQrZUtTU2M9PC9YNTA5Q2VydGlmaWNhdGU+PC9YNTA5RGF0YT48S2V5VmFsdWU+PFJTQUtleVZhbHVlPjxNb2R1bHVzPnAvaWtLbUhJaGRpRWw5d04zZGwvSVI1Y0RWK3o1R0RKU1NhQnR5QUZUZGdTdGVYQ3pPU0tpVitPMkgvMTVYN1NiNGkzK2gyb3FuNlpQdnFza2FYbE1GUXFkZlBOZnI2QVFsYVdhdlBQZ0w1dWJPeXFjSjdjMlZ6bzZMRlQ2WHNyaFN5MW4rcnozTXVRSUNqdjdVMzRCNnArc3JKbDh0OW9mNUVwOWJsUGo4bXR5OWZaU2JpZis3b1hxa2FBQVV5TFQ4T2hyUmhaWlR4QVdDWDMvLzNXbEtqMk1udk4xR0JZK3NjUDk4RjRoM0dyTFBiMEN3RHJJWVJrZDJhYlNHVUhUZXRoV1lNamtRbVp6YkVDQk45K1Z1cnpaY0VyUVhKMm9XcHF2aW1PYkJWUW5hc1ZZRjkvWE5KZlBnNVBPUGJoU3BsQ0pxRzFCcWpyODdudmFmM1RSdz09PC9Nb2R1bHVzPjxFeHBvbmVudD5BUUFCPC9FeHBvbmVudD48L1JTQUtleVZhbHVlPjwvS2V5VmFsdWU+PC9LZXlJbmZvPjwvU2lnbmF0dXJlPjwvU09BUDpIZWFkZXI+PFNPQVA6Qm9keT48ZWI6TWFuaWZlc3QgZWI6dmVyc2lvbj0iMi4wIj48ZWI6UmVmZXJlbmNlIHhsaW5rOmhyZWY9ImNpZDphdHRhY2htZW50SWQtMDIyZmFmMjYtMGUxMi00ZGZlLWE1OWItYjUwNjEzMmYxNjQ1Ij48L2ViOlJlZmVyZW5jZT48L2ViOk1hbmlmZXN0PjwvU09BUDpCb2R5PjwvU09BUDpFbnZlbG9wZT4="""
const val FAGMELDING_PAYLOAD: String = """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"""

class MultipartRequest(val headers: Headers, val parts:List<Part>)

class Part(val headers: Headers, val payload: String)


fun validMultipartRequest(): MultipartRequest {
        return MultipartRequest(valid, listOf(
            Part(validSoapMimeHeaders, EBXML_PAYLOAD),
            Part(validSoapAttachmentHeaders, FAGMELDING_PAYLOAD)
        ))
}

val valid = Headers.build {
        append(MimeHeaders.MIME_VERSION,"1.0")
        append(MimeHeaders.SOAP_ACTION,"ebXML")
        append(MimeHeaders.CONTENT_TYPE, MULTIPART_CONTENT_TYPE)
    }

val validSoapMimeHeaders =  Headers.build {
        append(MimeHeaders.CONTENT_ID,"<soapId-6ae68a32-8b0e-4de2-baad-f4d841aacce1>")
        append(MimeHeaders.CONTENT_TRANSFER_ENCODING,"base64")
        append(MimeHeaders.CONTENT_TYPE, """text/xml; charset="UTF-8"""")
    }

val validSoapAttachmentHeaders =  Headers.build {
        append(MimeHeaders.CONTENT_ID,"<soapId-6ae68a32-8b0e-4de2-baad-f4d841aacce1>")
        append(MimeHeaders.CONTENT_TRANSFER_ENCODING,"base64")
        append(MimeHeaders.CONTENT_DISPOSITION,"attachment")
        append(MimeHeaders.CONTENT_TYPE, """application/pkcs7-mime; smimetype=enveloped-data"""")
}

public fun Headers.modify(block: (HeadersBuilder) -> Unit) = Headers.build {
        this@modify.entries().forEach {
            this.append(it.key, it.value.first())
            this.apply(block)
        }
}

fun  MultipartRequest.modify(block: (HeadersBuilder) -> Unit) : MultipartRequest  {
    val headers = Headers.build {
        this@modify.headers.entries().forEach{
             this.append(it.key, it.value.first())
             this.apply(block)
    }
    }
    return MultipartRequest(headers,this.parts)
}

fun MultipartRequest.modify(pair: Pair<Part,Part>): MultipartRequest {
    return MultipartRequest(headers,parts.swap(pair))
}

fun  Part.modify(block: (HeadersBuilder) -> Unit) : Part  {
    val headers = Headers.build {
        this@modify.headers.entries().forEach{
             this.append(it.key, it.value.first())
            this.apply(block)
    }
    }
    return Part(headers,this.payload)
}

fun  Part.payload(payload: String) : Part  {
    val headers = Headers.build {
        this@payload.headers.entries().forEach{
            this.append(it.key, it.value.first())

        }
    }
    return Part(headers,payload)
}

fun MultipartRequest.asHttpRequest():HttpRequestBuilder.() -> Unit {
    return {
        headers {
            this@asHttpRequest.headers.entries().forEach {
                append(it.key,it.value.first())
            }
        }
        val partData = this@asHttpRequest.parts.map { PartData.FormItem(it.payload,{},it.headers) }
        setBody(MultiPartFormDataContent(
            partData, boundary = "----=_Part_495_-1172936255.1665395092859", ContentType.parse(MULTIPART_CONTENT_TYPE)
        ))
    }
}

fun List<Part>.swap(pair: Pair<Part,Part>): List<Part> {
    val itemIndex = indexOf(pair.first)
    return if (itemIndex == -1) this.toList()
    else slice(0 until itemIndex) + pair.second + slice(itemIndex+1 until size)
}