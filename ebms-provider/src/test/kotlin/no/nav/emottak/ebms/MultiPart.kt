package no.nav.emottak.ebms

import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.forms.MultiPartFormDataContent
import io.ktor.client.request.headers
import io.ktor.client.request.setBody
import io.ktor.http.ContentType
import io.ktor.http.Headers
import io.ktor.http.HeadersBuilder
import io.ktor.http.content.PartData
import no.nav.emottak.constants.SMTPHeaders
import no.nav.emottak.ebms.validation.MimeHeaders

const val MULTIPART_CONTENT_TYPE: String = """multipart/related;type="text/xml";boundary="----=_Part_495_-1172936255.1665395092859";start="<soapId-6ae68a32-8b0e-4de2-baad-f4d841aacce1>";"""
const val EBXML_PAYLOAD: String = """"""
const val FAGMELDING_PAYLOAD: String = """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"""

class MultipartRequest(val headers: Headers, val parts: List<Part>)

class SinglePartRequest(headers: Headers, payload: String) : Part(headers, payload)

open class Part(val headers: Headers, val payload: String)

fun validMultipartRequest(): MultipartRequest {
    return MultipartRequest(
        valid.modify {
            it.append(SMTPHeaders.MESSAGE_ID, "12345")
        },
        listOf(
            Part(validSoapMimeHeaders, EBXML_PAYLOAD),
            Part(validSoapAttachmentHeaders, FAGMELDING_PAYLOAD)
        )
    )
}
val validSMTPHeaders = Headers.build {
    append(SMTPHeaders.MESSAGE_ID, "12345")
}

val valid = Headers.build {
    append(MimeHeaders.MIME_VERSION, "1.0")
    append(MimeHeaders.SOAP_ACTION, "ebXML")
    append(MimeHeaders.CONTENT_TYPE, MULTIPART_CONTENT_TYPE)
}

val validSoapMimeHeaders = Headers.build {
    append(MimeHeaders.CONTENT_ID, "<soapId-6ae68a32-8b0e-4de2-baad-f4d841aacce1>")
    append(MimeHeaders.CONTENT_TRANSFER_ENCODING, "base64")
    append(MimeHeaders.CONTENT_TYPE, """text/xml; charset="UTF-8"""")
}

val validSoapAttachmentHeaders = Headers.build {
    append(MimeHeaders.CONTENT_ID, "<3CTGI8UKUKU4.ADHEUDMDCY3Q3@speare.no>")
    append(MimeHeaders.CONTENT_TRANSFER_ENCODING, "base64")
    append(MimeHeaders.CONTENT_DISPOSITION, "attachment")
    append(MimeHeaders.CONTENT_TYPE, """application/pkcs7-mime; smimetype=enveloped-data"""")
}

public fun Headers.modify(block: (HeadersBuilder) -> Unit) = Headers.build {
    this@modify.entries().forEach {
        this.append(it.key, it.value.first())
        this.apply(block)
    }
}

fun MultipartRequest.modify(block: (HeadersBuilder) -> Unit): MultipartRequest {
    val headers = Headers.build {
        this@modify.headers.entries().forEach {
            this.append(it.key, it.value.first())
            this.apply(block)
        }
    }
    return MultipartRequest(headers, this.parts)
}

fun MultipartRequest.modify(pair: Pair<Part, Part>): MultipartRequest {
    return MultipartRequest(headers, parts.swap(pair))
}

fun Part.modify(block: (HeadersBuilder) -> Unit): Part {
    val headers = Headers.build {
        this@modify.headers.entries().forEach {
            this.append(it.key, it.value.first())
            this.apply(block)
        }
    }
    return Part(headers, this.payload)
}

fun Part.payload(payload: String): Part {
    val headers = Headers.build {
        this@payload.headers.entries().forEach {
            this.append(it.key, it.value.first())
        }
    }
    return Part(headers, payload)
}

fun MultipartRequest.asHttpRequest(): HttpRequestBuilder.() -> Unit {
    return {
        headers {
            this@asHttpRequest.headers.entries().forEach {
                append(it.key, it.value.first())
            }
        }
        val partData = this@asHttpRequest.parts.map { PartData.FormItem(it.payload, {}, it.headers) }
        setBody(
            MultiPartFormDataContent(
                partData,
                boundary = "----=_Part_495_-1172936255.1665395092859",
                ContentType.parse(MULTIPART_CONTENT_TYPE)
            )
        )
    }
}

fun List<Part>.swap(pair: Pair<Part, Part>): List<Part> {
    val itemIndex = indexOf(pair.first)
    return if (itemIndex == -1) {
        this.toList()
    } else {
        slice(0 until itemIndex) + pair.second + slice(itemIndex + 1 until size)
    }
}
