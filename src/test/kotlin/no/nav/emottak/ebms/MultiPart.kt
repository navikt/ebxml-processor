package no.nav.emottak.ebms

import io.ktor.client.request.*
import io.ktor.client.request.forms.*
import io.ktor.http.*
import io.ktor.http.content.*
import no.nav.emottak.ebms.validation.MimeHeaders

const val MULTIPART_CONTENT_TYPE: String = """multipart/related;type="text/xml";boundary="----=_Part_495_-1172936255.1665395092859";start="<soapId-6ae68a32-8b0e-4de2-baad-f4d841aacce1>";"""
const val EBXML_PAYLOAD: String = """PFNPQVA6RW52ZWxvcGUgeG1sbnM6U09BUD0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOmViPSJodHRwOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL2NvbW1pdHRlZXMvZWJ4bWwtbXNnL3NjaGVtYS9tc2ctaGVhZGVyLTJfMC54c2QiIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3NvYXAvZW52ZWxvcGUvIGh0dHA6Ly93d3cub2FzaXMtb3Blbi5vcmcvY29tbWl0dGVlcy9lYnhtbC1tc2cvc2NoZW1hL2VudmVsb3BlLnhzZCBodHRwOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL2NvbW1pdHRlZXMvZWJ4bWwtbXNnL3NjaGVtYS9tc2ctaGVhZGVyLTJfMC54c2QiPjxTT0FQOkhlYWRlcj48ZWI6TWVzc2FnZUhlYWRlciBTT0FQOm11c3RVbmRlcnN0YW5kPSIxIiBlYjp2ZXJzaW9uPSIyLjAiPjxlYjpGcm9tPjxlYjpQYXJ0eUlkIGViOnR5cGU9IkhFUiI+ODgzNjQ8L2ViOlBhcnR5SWQ+PGViOlJvbGU+VXRsZXZlcmVyPC9lYjpSb2xlPjwvZWI6RnJvbT48ZWI6VG8+PGViOlBhcnR5SWQgZWI6dHlwZT0iSEVSIj43OTc2ODwvZWI6UGFydHlJZD48ZWI6Um9sZT5Gcmlrb3J0cmVnaXN0ZXI8L2ViOlJvbGU+PC9lYjpUbz48ZWI6Q1BBSWQ+bmF2OnFhc3M6MzE4Njg8L2ViOkNQQUlkPjxlYjpDb252ZXJzYXRpb25JZD5hYjFjOWI0Mi04ZDI5LTQ5YWQtYjg3MS1iNDc4OTFlMDNmODg8L2ViOkNvbnZlcnNhdGlvbklkPjxlYjpTZXJ2aWNlIGViOnR5cGU9InN0cmluZyI+SGFyQm9yZ2VyRWdlbmFuZGVsRnJpdGFrPC9lYjpTZXJ2aWNlPjxlYjpBY3Rpb24+RWdlbmFuZGVsRm9yZXNwb3JzZWw8L2ViOkFjdGlvbj48ZWI6TWVzc2FnZURhdGE+PGViOk1lc3NhZ2VJZD5hYjFjOWI0Mi04ZDI5LTQ5YWQtYjg3MS1iNDc4OTFlMDNmODg8L2ViOk1lc3NhZ2VJZD48ZWI6VGltZXN0YW1wPjIwMjItMTAtMTBUMDk6NDQ6NTIuNDMxWjwvZWI6VGltZXN0YW1wPjwvZWI6TWVzc2FnZURhdGE+PC9lYjpNZXNzYWdlSGVhZGVyPjxlYjpTeW5jUmVwbHkgU09BUDphY3Rvcj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9hY3Rvci9uZXh0IiBTT0FQOm11c3RVbmRlcnN0YW5kPSIxIiBlYjp2ZXJzaW9uPSIyLjAiPjwvZWI6U3luY1JlcGx5PjxTaWduYXR1cmUgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxTaWduZWRJbmZvPjxDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMS9SRUMteG1sLWMxNG4tMjAwMTAzMTUiPjwvQ2Fub25pY2FsaXphdGlvbk1ldGhvZD48U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIj48L1NpZ25hdHVyZU1ldGhvZD48UmVmZXJlbmNlIFVSST0iIj48VHJhbnNmb3Jtcz48VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiPjwvVHJhbnNmb3JtPjxUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAxL1JFQy14bWwtYzE0bi0yMDAxMDMxNSI+PC9UcmFuc2Zvcm0+PC9UcmFuc2Zvcm1zPjxEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSI+PC9EaWdlc3RNZXRob2Q+PERpZ2VzdFZhbHVlPlgyalNJL1VieG5LSGpjMXpVV053eHpBUEc0dz08L0RpZ2VzdFZhbHVlPjwvUmVmZXJlbmNlPjxSZWZlcmVuY2UgVVJJPSJjaWQ6YXR0YWNobWVudElkLTAyMmZhZjI2LTBlMTItNGRmZS1hNTliLWI1MDYxMzJmMTY0NSI+PERpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIj48L0RpZ2VzdE1ldGhvZD48RGlnZXN0VmFsdWU+djlQSGVqMlNnV2x3d1FRQVZFTlVEMG80UjRVPTwvRGlnZXN0VmFsdWU+PC9SZWZlcmVuY2U+PC9TaWduZWRJbmZvPjxTaWduYXR1cmVWYWx1ZT5Nb1QyeUxvY0pMb2R2WGE3dzEwTnJDMFpaM1ZlR3FvSk9QUXlsZG1tampGZ0JxdXBqU0xiQmFIYVgyYWFzNFFPL3FSRGx6Vk9ubDZ2bERkRWJ5LzBvMjdMWkppZEx2dEhXRWN6WEpVR1V3ZXNhY1V1M2hjbUZodWJVSTlhbXdvTVpmelRaaVlIYzZPTlowUVZXcE1rdlRVWUdsSXIvS0V5TmFFeGZ1WWVQKzYxWXdwMlB0UjFpbmVOaUgrWmpjOWpYZStWMHUyaVFtL3pzSzRUZ2VtdDRva3BTWkRCd2RUSzFUQ1h1UThRKzVKOTBzeDUwWU5Bb0VLbEgrMkdkeFRYRWxaZ3RHSmdQOCtYYVBKZzB5VWJmWkxhREJXZDhyMGljSTlUamM2aXdBUkczT2JoTS9iNGdqZ3pQU0NIS2hIbWJJWkVGWkZ4bUtaQUU3Mk1NejhHY1E9PTwvU2lnbmF0dXJlVmFsdWU+PEtleUluZm8+PFg1MDlEYXRhPjxYNTA5Q2VydGlmaWNhdGU+TUlJRlFUQ0NCQ21nQXdJQkFnSUxCTmdKQTZINDhBN1JLUGN3RFFZSktvWklodmNOQVFFTEJRQXdVVEVMTUFrR0ExVUVCaE1DVGs4eEhUQWJCZ05WQkFvTUZFSjFlWEJoYzNNZ1FWTXRPVGd6TVRZek16STNNU013SVFZRFZRUUREQnBDZFhsd1lYTnpJRU5zWVhOeklETWdWR1Z6ZERRZ1EwRWdNekFlRncweU1UQTVNVFl4TmpVM05EaGFGdzB5TkRBNU1UWXlNVFU1TURCYU1JR0hNUXN3Q1FZRFZRUUdFd0pPVHpFWE1CVUdBMVVFQ2d3T1FrOVBWRk1nVGs5U1IwVWdRVk14SnpBbEJnTlZCQXNNSGtKUFQxUlRJRUZRVDFSRlN5QlRTOE9ZV1VWT0xUazNPVFF3TmpreU5ERWlNQ0FHQTFVRUF3d1pRazlQVkZNZ1FWQlBWRVZMSUZOTHc1aFpSVTRnVkVWVFZERVNNQkFHQTFVRUJSTUpPVGd5TlRRM09ESXlNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXAvaWtLbUhJaGRpRWw5d04zZGwvSVI1Y0RWK3o1R0RKU1NhQnR5QUZUZGdTdGVYQ3pPU0tpVitPMkgvMTVYN1NiNGkzK2gyb3FuNlpQdnFza2FYbE1GUXFkZlBOZnI2QVFsYVdhdlBQZ0w1dWJPeXFjSjdjMlZ6bzZMRlQ2WHNyaFN5MW4rcnozTXVRSUNqdjdVMzRCNnArc3JKbDh0OW9mNUVwOWJsUGo4bXR5OWZaU2JpZis3b1hxa2FBQVV5TFQ4T2hyUmhaWlR4QVdDWDMvLzNXbEtqMk1udk4xR0JZK3NjUDk4RjRoM0dyTFBiMEN3RHJJWVJrZDJhYlNHVUhUZXRoV1lNamtRbVp6YkVDQk45K1Z1cnpaY0VyUVhKMm9XcHF2aW1PYkJWUW5hc1ZZRjkvWE5KZlBnNVBPUGJoU3BsQ0pxRzFCcWpyODdudmFmM1RSd0lEQVFBQm80SUI0VENDQWQwd0NRWURWUjBUQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlEvcnZWNEM1S2pjQ0ExWDFyNjl5U2dVZ0h3UVRBZEJnTlZIUTRFRmdRVXF1YWhsU0FSb1h5YnRaaUJsVG1Qc0xubUZaWXdEZ1lEVlIwUEFRSC9CQVFEQWdaQU1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUNCZ2dyQmdFRkJRY0RCREFXQmdOVkhTQUVEekFOTUFzR0NXQ0VRZ0VhQVFBREFqQ0J1d1lEVlIwZkJJR3pNSUd3TURlZ05hQXpoakZvZEhSd09pOHZZM0pzTG5SbGMzUTBMbUoxZVhCaGMzTXVibTh2WTNKc0wwSlFRMnhoYzNNelZEUkRRVE11WTNKc01IV2djNkJ4aG05c1pHRndPaTh2YkdSaGNDNTBaWE4wTkM1aWRYbHdZWE56TG01dkwyUmpQVUoxZVhCaGMzTXNaR005VGs4c1EwNDlRblY1Y0dGemN5VXlNRU5zWVhOekpUSXdNeVV5TUZSbGMzUTBKVEl3UTBFbE1qQXpQMk5sY25ScFptbGpZWFJsVW1WMmIyTmhkR2x2Ymt4cGMzUXdnWW9HQ0NzR0FRVUZCd0VCQkg0d2ZEQTdCZ2dyQmdFRkJRY3dBWVl2YUhSMGNEb3ZMMjlqYzNBdWRHVnpkRFF1WW5WNWNHRnpjeTV1Ynk5dlkzTndMMEpRUTJ4aGMzTXpWRFJEUVRNd1BRWUlLd1lCQlFVSE1BS0dNV2gwZEhBNkx5OWpjblF1ZEdWemREUXVZblY1Y0dGemN5NXVieTlqY25RdlFsQkRiR0Z6Y3pOVU5FTkJNeTVqWlhJd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFDek9xUGZBUlgvZVE3Ry92M1EzUlo1bkJuUi9uTjQ2WWx5VzBjU1hOMEZKa1pMeGJWZThBNUUvSTFRdjdFYUFvdEwyV0VJV1FJZlhCdkRqTDZ6UmVkUEpEYXRjUEI5dHR0bGpta1JMSENzSUdDZTRpUndURGFqNEVYZHVWOU1rdVBBUklWNWFLRGpmMC8wdTl4Yk54SFJQWTNTb2FJNmRzUEVhb1VjWGt0QnVMTGJrV3ZFQXo1c2xvRU8wRGp1eGY2V1pRZDdGeWcyd2l2SlltUWwvNzVkTGVEYUFUS092YWdTMWtZemtqeHRsd09LbFZ2Q21ZSTFicFlSRnl4Y2lDWGVYL09BRU9LakNqM0FkdlBzUVdMOERyeFVQYVdxS0RzcGxWRlJod3NldFQ1UW5YejdKazNNY0hBS21KNUFuYXdMMXE2RmdxRG5CcWdiOGQrZUtTU2M9PC9YNTA5Q2VydGlmaWNhdGU+PC9YNTA5RGF0YT48S2V5VmFsdWU+PFJTQUtleVZhbHVlPjxNb2R1bHVzPnAvaWtLbUhJaGRpRWw5d04zZGwvSVI1Y0RWK3o1R0RKU1NhQnR5QUZUZGdTdGVYQ3pPU0tpVitPMkgvMTVYN1NiNGkzK2gyb3FuNlpQdnFza2FYbE1GUXFkZlBOZnI2QVFsYVdhdlBQZ0w1dWJPeXFjSjdjMlZ6bzZMRlQ2WHNyaFN5MW4rcnozTXVRSUNqdjdVMzRCNnArc3JKbDh0OW9mNUVwOWJsUGo4bXR5OWZaU2JpZis3b1hxa2FBQVV5TFQ4T2hyUmhaWlR4QVdDWDMvLzNXbEtqMk1udk4xR0JZK3NjUDk4RjRoM0dyTFBiMEN3RHJJWVJrZDJhYlNHVUhUZXRoV1lNamtRbVp6YkVDQk45K1Z1cnpaY0VyUVhKMm9XcHF2aW1PYkJWUW5hc1ZZRjkvWE5KZlBnNVBPUGJoU3BsQ0pxRzFCcWpyODdudmFmM1RSdz09PC9Nb2R1bHVzPjxFeHBvbmVudD5BUUFCPC9FeHBvbmVudD48L1JTQUtleVZhbHVlPjwvS2V5VmFsdWU+PC9LZXlJbmZvPjwvU2lnbmF0dXJlPjwvU09BUDpIZWFkZXI+PFNPQVA6Qm9keT48ZWI6TWFuaWZlc3QgZWI6dmVyc2lvbj0iMi4wIj48ZWI6UmVmZXJlbmNlIHhsaW5rOmhyZWY9ImNpZDphdHRhY2htZW50SWQtMDIyZmFmMjYtMGUxMi00ZGZlLWE1OWItYjUwNjEzMmYxNjQ1Ij48L2ViOlJlZmVyZW5jZT48L2ViOk1hbmlmZXN0PjwvU09BUDpCb2R5PjwvU09BUDpFbnZlbG9wZT4="""
const val FAGMELDING_PAYLOAD: String = """PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz48bnM6TXNnSGVhZCB4bWxuczp4c2Q9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4bWxuczpucz0iaHR0cDovL3d3dy5raXRoLm5vL3htbHN0ZHMvbXNnaGVhZC8yMDA2LTA1LTI0IiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cua2l0aC5uby94bWxzdGRzL21zZ2hlYWQvMjAwNi0wNS0yNCBNc2dIZWFkLXYxXzIueHNkIj4KICA8bnM6TXNnSW5mbz4KICAgIDxuczpUeXBlIFY9IkVnZW5hbmRlbEZvcmVzcG9yc2VsVjIiIEROPSJGb3Jlc3DDuHJzZWwgb20gZWdlbmFuZGVsIiAvPgogICAgPG5zOk1JR3ZlcnNpb24+djEuMiAyMDA2LTA1LTI0PC9uczpNSUd2ZXJzaW9uPgogICAgPG5zOkdlbkRhdGU+MjAyMi0xMC0xMFQwOTo0NDo1Mi40MzFaPC9uczpHZW5EYXRlPgogICAgPG5zOk1zZ0lkPmFiMWM5YjQyLThkMjktNDlhZC1iODcxLWI0Nzg5MWUwM2Y4ODwvbnM6TXNnSWQ+CiAgICA8bnM6Q29udmVyc2F0aW9uUmVmPgogICAgICA8bnM6UmVmVG9QYXJlbnQ+YWIxYzliNDItOGQyOS00OWFkLWI4NzEtYjQ3ODkxZTAzZjg4PC9uczpSZWZUb1BhcmVudD4KICAgICAgPG5zOlJlZlRvQ29udmVyc2F0aW9uPmFiMWM5YjQyLThkMjktNDlhZC1iODcxLWI0Nzg5MWUwM2Y4ODwvbnM6UmVmVG9Db252ZXJzYXRpb24+CiAgICA8L25zOkNvbnZlcnNhdGlvblJlZj4KICAgIDxuczpTZW5kZXI+CiAgICAgIDxuczpPcmdhbmlzYXRpb24+CiAgICAgICAgPG5zOk9yZ2FuaXNhdGlvbk5hbWU+Qk9PVFMgQVBPVEVLIFNLw5hZRU48L25zOk9yZ2FuaXNhdGlvbk5hbWU+CiAgICAgICAgPG5zOklkZW50PgogICAgICAgICAgPG5zOklkPjk3OTQwNjkyNDwvbnM6SWQ+CiAgICAgICAgICA8bnM6VHlwZUlkIFY9IkVOSCIgUz0iMi4xNi41NzguMS4xMi40LjEuMS45MDUxIiBETj0iT3JnYW5pc2Fzam9uc251bW1lcmV0IGkgRW5oZXRzcmVnaXN0ZXIiIC8+CiAgICAgICAgPC9uczpJZGVudD4KICAgICAgICA8bnM6SWRlbnQ+CiAgICAgICAgICA8bnM6SWQ+ODgzNjQ8L25zOklkPgogICAgICAgICAgPG5zOlR5cGVJZCBWPSJIRVIiIFM9IjIuMTYuNTc4LjEuMTIuNC4xLjEuOTA1MSIgRE49IkhFUi1pZCIgLz4KICAgICAgICA8L25zOklkZW50PgogICAgICA8L25zOk9yZ2FuaXNhdGlvbj4KICAgIDwvbnM6U2VuZGVyPgogICAgPG5zOlJlY2VpdmVyPgogICAgICA8bnM6T3JnYW5pc2F0aW9uPgogICAgICAgIDxuczpPcmdhbmlzYXRpb25OYW1lPk5BVjwvbnM6T3JnYW5pc2F0aW9uTmFtZT4KICAgICAgICA8bnM6SWRlbnQ+CiAgICAgICAgICA8bnM6SWQ+ODg5NjQwNzgyPC9uczpJZD4KICAgICAgICAgIDxuczpUeXBlSWQgVj0iRU5IIiBTPSIyLjE2LjU3OC4xLjEyLjQuMS4xLjkwNTEiIEROPSJPcmdhbmlzYXNqb25zbnVtbWVyZXQgaSBFbmhldHNyZWdpc3RlciIgLz4KICAgICAgICA8L25zOklkZW50PgogICAgICAgIDxuczpJZGVudD4KICAgICAgICAgIDxuczpJZD43OTc2ODwvbnM6SWQ+CiAgICAgICAgICA8bnM6VHlwZUlkIFY9IkhFUiIgUz0iMi4xNi41NzguMS4xMi40LjEuMS45MDUxIiBETj0iSWRlbnRpZmlrYXRvciBmcmEgSGVsc2V0amVuZXN0ZWVuaGV0c3JlZ2lzdGVyZXQiIC8+CiAgICAgICAgPC9uczpJZGVudD4KICAgICAgPC9uczpPcmdhbmlzYXRpb24+CiAgICA8L25zOlJlY2VpdmVyPgogIDwvbnM6TXNnSW5mbz4KICA8bnM6RG9jdW1lbnQ+CiAgICA8bnM6RG9jdW1lbnRDb25uZWN0aW9uIFY9IkgiIEROPSJIb3ZlZGRva3VtZW50IiAvPgogICAgPG5zOlJlZkRvYz4KICAgICAgPG5zOk1zZ1R5cGUgVj0iWE1MIiBETj0iWE1MLWluc3RhbnMiIC8+CiAgICAgIDxuczpDb250ZW50PgogICAgICAgIDxFZ2VuYW5kZWxGb3Jlc3BvcnNlbFYyIHhtbG5zPSJodHRwOi8vd3d3LmtpdGgubm8veG1sc3Rkcy9uYXYvZWdlbmFuZGVsLzIwMTYtMDYtMTAiPgogICAgICAgICAgPEhhckJvcmdlckVnZW5hbmRlbGZyaXRhaz4KICAgICAgICAgICAgPEJvcmdlckZucj4xMTAxNzMxOTQzNjwvQm9yZ2VyRm5yPgogICAgICAgICAgICA8RGF0bz4yMDIyLTEwLTEwPC9EYXRvPgogICAgICAgICAgPC9IYXJCb3JnZXJFZ2VuYW5kZWxmcml0YWs+CiAgICAgICAgPC9FZ2VuYW5kZWxGb3Jlc3BvcnNlbFYyPgogICAgICA8L25zOkNvbnRlbnQ+CiAgICA8L25zOlJlZkRvYz4KICA8L25zOkRvY3VtZW50Pgo8L25zOk1zZ0hlYWQ+"""

class MultipartRequest(val headers: Headers, val parts:List<Part>)

class Part(val headers: Headers, val payload: String)


fun validMultipartRequest(): MultipartRequest {
        return MultipartRequest(valid, listOf(
            Part(validSoapMimeHeaders, EBXML_PAYLOAD),
            Part(validSoapAttachmentHeaders, FAGMELDING_PAYLOAD)
        ))
}

val valid = Headers.build {
        append(MimeHeaders.MIME_VERSION,"1.0")
        append(MimeHeaders.SOAP_ACTION,"ebXML")
        append(MimeHeaders.CONTENT_TYPE, MULTIPART_CONTENT_TYPE)
    }

val validSoapMimeHeaders =  Headers.build {
        append(MimeHeaders.CONTENT_ID,"<soapId-6ae68a32-8b0e-4de2-baad-f4d841aacce1>")
        append(MimeHeaders.CONTENT_TRANSFER_ENCODING,"base64")
        append(MimeHeaders.CONTENT_TYPE, """text/xml; charset="UTF-8"""")
    }

val validSoapAttachmentHeaders =  Headers.build {
        append(MimeHeaders.CONTENT_ID,"<soapId-6ae68a32-8b0e-4de2-baad-f4d841aacce1>")
        append(MimeHeaders.CONTENT_TRANSFER_ENCODING,"base64")
        append(MimeHeaders.CONTENT_DISPOSITION,"attachment")
        append(MimeHeaders.CONTENT_TYPE, """application/pkcs7-mime; smimetype=enveloped-data"""")
}

public fun Headers.modify(block: (HeadersBuilder) -> Unit) = Headers.build {
        this@modify.entries().forEach {
            this.append(it.key, it.value.first())
            this.apply(block)
        }
}

fun  MultipartRequest.modify(block: (HeadersBuilder) -> Unit) : MultipartRequest  {
    val headers = Headers.build {
        this@modify.headers.entries().forEach{
             this.append(it.key, it.value.first())
             this.apply(block)
    }
    }
    return MultipartRequest(headers,this.parts)
}

fun MultipartRequest.modify(pair: Pair<Part,Part>): MultipartRequest {
    val parts = this.parts.filter { it != pair.first }
    return MultipartRequest(headers,parts + pair.second)
}

fun  Part.modify(block: (HeadersBuilder) -> Unit) : Part  {
    val headers = Headers.build {
        this@modify.headers.entries().forEach{
             this.append(it.key, it.value.first())
            this.apply(block)
    }
    }
    return Part(headers,this.payload)
}

fun  Part.payload(payload: String) : Part  {
    val headers = Headers.build {
        this@payload.headers.entries().forEach{
            this.append(it.key, it.value.first())

        }
    }
    return Part(headers,payload)
}

fun MultipartRequest.asHttpRequest():HttpRequestBuilder.() -> Unit {
    return {
        headers {
            this@asHttpRequest.headers.entries().forEach {
                append(it.key,it.value.first())
            }
        }
        val partData = this@asHttpRequest.parts.map { PartData.FormItem(it.payload,{},it.headers) }
        setBody(MultiPartFormDataContent(
            partData, boundary = "----=_Part_495_-1172936255.1665395092859", ContentType.parse(MULTIPART_CONTENT_TYPE)
        ))
    }
}